from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove
import estate_bot.app.base.base_keyboards
from estate_bot.config import ADMINS
from estate_bot.utils.google_api.models import UserCreation

base = Router()
table = UserCreation()


class RegistrationState(StatesGroup):
    phone_number = State()
    full_name = State()
    email = State()


@base.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:\n"
        "- üïµÔ∏è‚Äç‚ôÇÔ∏è –ê–≥–µ–Ω—Ç (—è–≤–ª—è–µ—Ç–µ—Å—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –∫–ª–∏–µ–Ω—Ç–æ–º)\n"
        "- ‚úçÔ∏è –û—Ñ–æ—Ä–º–∏—Ç–µ–ª—å (–∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏)\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å",
        reply_markup=estate_bot.app.base.base_keyboards.role_choice_keyboard,
    )


@base.callback_query(F.data == "agent")
async def callback_agent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationState.phone_number)
    await callback.answer()
    await state.update_data(
        type="–ê–≥–µ–Ω—Ç",
    )
    await callback.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –∞–≥–µ–Ω—Ç–∞\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=estate_bot.app.base.base_keyboards.contact_keyboard,
    )


@base.callback_query(F.data == "manager")
async def callback_manager(callback: CallbackQuery, state: FSMContext):
    await state.set_state(RegistrationState.phone_number)
    await callback.answer()
    await state.update_data(
        type="–û—Ñ–æ—Ä–º–∏—Ç–µ–ª—å",
    )
    await callback.message.answer(
        "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ—Ñ–æ—Ä–º–∏—Ç–µ–ª—è\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
        reply_markup=estate_bot.app.base.base_keyboards.contact_keyboard,
    )


@base.message(RegistrationState.phone_number, F.contact)
async def state_phone_number(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.full_name)
    await state.update_data(
        number=message.contact.phone_number,
    )
    await message.answer(
        "–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?",
        reply_markup=ReplyKeyboardRemove(),
    )


@base.message(RegistrationState.full_name)
async def state_full_name(message: Message, state: FSMContext):
    await state.set_state(RegistrationState.email)
    await state.update_data(
        full_name=message.text,
    )
    await message.answer(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –í–∞—à email\n\n"
        "–ï—Å–ª–∏ –í—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–≤–æ–π email, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ—á–∫—É",
    )


@base.message(RegistrationState.email)
async def state_email(message: Message, state: FSMContext):
    await state.update_data(
        email=message.text,
    )
    data = await state.get_data()
    await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ")
    for admin_id in ADMINS:
        await message.bot.send_message(
            admin_id,
            f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞‚ö†Ô∏è\n\n"
            f"–§–ò–û: {data['full_name']}\n"
            f"Email: {data['email']}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {data['type']}",
            reply_markup=estate_bot.app.base.base_keyboards.access_keyboard(
                telegram_id=message.chat.id,
            ),
        )

    table.request_creation(
        data=[
            message.chat.id,
            data["full_name"],
            data["email"],
            data["number"],
            data["type"],
            "–û–∂–∏–¥–∞–µ—Ç –∞–∫—Ç–∏–≤–∞—Ü–∏–∏",
        ]
    )
    await state.clear()


@base.callback_query(F.data.startswith("accept"))
async def callback_user_accept(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.data.replace("accept#", "")
    table.request_accept(
        user_id,
        "–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
    )
    await callback.bot.send_message(user_id, "–í–∞—à—É –∑–∞—è–≤–∫—É –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏‚úÖ")
    await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω‚úÖ")


@base.callback_query(F.data.startswith("decline"))
async def callback_user_decline(callback: CallbackQuery):
    await callback.answer()
    user_id = callback.data.replace("decline#", "")
    table.request_accept(
        user_id,
        "–î–µ–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
    )
    await callback.bot.send_message(user_id, "–í–∞—à—É –∑–∞—è–≤–∫—É –æ—Ç–∫–ª–æ–Ω–∏–ª–∏‚ùå")
    await callback.message.edit_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω‚ùå")
